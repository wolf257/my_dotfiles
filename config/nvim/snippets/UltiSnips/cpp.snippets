priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

snippet inch "include headers"
include "${1:name}.h"

$0
endsnippet

snippet inc "include"
include "<${1:name}>"

$0
endsnippet

snippet for "for"
for(unsigned ${1:var} = 0; $1 < ${2:condition}; ${3:$1++}) {
	${0:/* code */}
}
endsnippet


snippet forrange "for-range"
for (auto ${1:var} : ${2:seq} ){
    ${3:#code}
}

$0
endsnippet

snippet while "while"
while (${1:condition}){
    ${2:#code}
}

$0
endsnippet

snippet cout "cout with endl"
cout << "${1:text}" << endl;

$0
endsnippet


snippet if "if"
if (${1:condition}){
     ${2:#code}
}

$0
endsnippet

snippet ife "if/else"
if (${1:condition}){
     ${2:#code}
}
else {
    ${3:#code};
}

$0
endsnippet

snippet ifee "if / else if / else"
if (${1:condition}){
     ${2:#code};
}
else if (${3:condition} {
    ${4:#code};
}
else {
    ${5:#code};
}

$0
endsnippet


snippet main "main function"
int main() {
    $0
    
    
    return 0;
}
endsnippet

snippet function "declare a function"
${1:type} ${2:name} (${3:parameters}){
    
    $0;
    
} // fin ${2:name}
endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet

# snippet abbr "name"
#
# endsnippet


###########################################################################
#			    Global functions 						  #
###########################################################################

# global !p
#
# def write_docstring_args(arglist, snip):
#     args = str(arglist).split(',')
#
#     if len(args) > 1:
#         c = 0
#         for arg in args:
#             if c == 0:
#                 snip.rv += arg
#                 c = 1
#             else:
#                 snip += '*       : %s' % arg.strip()
#     else:
#         snip.rv = args[0]
#
#
# endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# snippet beginend "$1.begin(), $1.end() (beginend)"
# ${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
# endsnippet
#
# snippet cl "class .. (class)"
# class ${1:`!p snip.rv = snip.basename or "name"`}
# {
# public:
#     ${1/(\w+).*/$1/} (${2:arguments});
#     virtual ~${1/(\w+).*/$1/} ();
#
# private:
#     ${0:/* data */}
# };
# endsnippet
#
# snippet ns "namespace .. (namespace)"
# namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
# {
#     ${VISUAL}$0
# }${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
# endsnippet
#
# snippet readfile "read file (readF)"
# std::vector<char> v;
# if (FILE *fp = fopen(${1:"filename"}, "r"))
# {
#     char buf[1024];
#     while(size_t len = fread(buf, 1, sizeof(buf), fp))
#         v.insert(v.end(), buf, buf + len);
#     fclose(fp);
# }
# endsnippet
#
# snippet map "std::map (map)"
# std::map<${1:key}, ${2:value}> map$0;
# endsnippet
#
# snippet vector "std::vector (v)"
# std::vector<${1:char}> v$0;
# endsnippet
#
# snippet tp "template <typename ..> (template)"
# template <typename ${1:_InputIter}>
# endsnippet
#
# snippet cla "An entire .h generator" b
# #ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
# #define $2
#
# class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
# {
# private:
#     $3
#
# public:
#     $1();
#     virtual ~$1();
# };
#
# #endif /* $2 */
# endsnippet
#
#
# snippet fnc "Basic c++ doxygen function template" b
# /**
# * @brief: ${4:brief}
# *
# * @param: `!p write_docstring_args(t[3],snip)`
# *
# * @return: `!p snip.rv = t[1]`
# */
# ${1:ReturnType} ${2:FunctionName}(${3:param})
# {
#     ${0:FunctionBody}
# }
# endsnippet




# vim:ft=snippets:
